-- Lilypond: http://lilypond.org/doc/v2.20/Documentation/notation/structure-of-a-score
-- http://lilypond.org/doc/v2.20/Documentation/notation/cheat-sheet
-- http://lilypond.org/doc/v2.20/Documentation/learning/introduction-to-the-lilypond-file-structure
-- BNFC grammar for C: https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf
{--
A \score block must contain a single music expression delimited by curly brackets:
\score {
  …
}
--}

-- TODO top level defs are entrypoint?
--entrypoints Score, Def ; -- Score block works without entrypoints, but not other combinations?

ScoreFile . Entry ::= [Def] ;
separator Def "" ;
entrypoints Entry ;

VersionDef .    Def        ::= "\\version" String ;
VariableDef .   Def        ::= Ident "=" MusicExpr ;
ScoreDef .      Def        ::= Score ;


ScoreBlock .    Score      ::= "\\score" "{" MusicExpr [ScoreDef] "}" ;
-- List
-- coercions MusicExpr 3 ; Breaks slurs: (). _. Exp3 ::= "(" Exp ")" ;

RelativeExp .   MusicExpr  ::= "\\relative" NoteToken MusicExpr ; -- ""\relative startpitch musicexpr"
CompoundExp .   MusicExpr  ::= "{" [ MusicExpr ] "}" ;
NoteExp .       MusicExpr  ::= NoteToken ;
KeyExpMajmin .  MusicExpr  ::= "\\key" NoteToken MajMin ;
KeyExp .        MusicExpr  ::= "\\key" NoteToken ;
TimeExp .       MusicExpr  ::= "\\time" Integer "/" Integer ; -- TODO verify later with other time signatures
VarExp .        MusicExpr  ::= VarToken ;
FermExp .       MusicExpr  ::= "\\fermata" ;
StaffExpWith .  MusicExpr  ::= "\\new" "Staff" WithBlock MusicExpr; -- TODO probably create more general \new Type --Also, precedence / nesting
StaffExp .      MusicExpr  ::= "\\new" "Staff" MusicExpr;
TypesetExp .    MusicExpr  ::= DirectionIndicator TypesetItem ; -- TODO come up with better name
BarExp .        MusicExpr  ::= "|" ;
CreStartExp .   MusicExpr  ::= "\\<" ;
DeCreStartExp . MusicExpr  ::= "\\>" ;
CreEndExp .     MusicExpr  ::= "\\!" ;
RepeatExpr .    MusicExpr  ::= "\\repeat" RepeatKind Integer MusicExpr ; -- http://lilypond.org/doc/v2.20/Documentation/notation/repeats
RepeatExprWithAlt . MusicExpr  ::= "\\repeat" RepeatKind Integer MusicExpr RepeatEnding ;
SlurStartExp .  MusicExpr  ::= "(" ;
SlurEndExp .    MusicExpr  ::= ")" ;
ClefExp .       MusicExpr  ::= "\\clef" ClefName ;
SimultExps .    MusicExpr  ::= "<<" [MusicExpr] ">>" ;
TieExp .        MusicExpr  ::= "~" ;
NewVoiceExp .   MusicExpr  ::= "\\new" "Voice" "=" String MusicExpr ;
NewNullVoiceExp . MusicExpr  ::= "\\new" "NullVoice" "=" String MusicExpr ;
NewStaffExp .   MusicExpr  ::= "\\new" "Staff" MusicExpr ;
NewNamedStaffExp .   MusicExpr  ::= "\\new" "Staff" "=" String MusicExpr ;
NewChoirStaffExp .   MusicExpr  ::= "\\new" "ChoirStaff" MusicExpr ;

Gclef .     ClefName ::= "G" ;
G8clef .    ClefName ::= "\"G_8\"" ; -- TODO Hmm... sometimes quoted? Also missing clef http://lilypond.org/doc/v2.19/Documentation/notation/clef-styles
Bassclef .  ClefName ::= "bass" ;

VoltaRepeat .   RepeatKind  ::= "volta" ;
UnfoldRepeat .  RepeatKind  ::= "unfold" ;
PercentRepeat . RepeatKind  ::= "percent" ;
TremoloRepeat . RepeatKind  ::= "tremolo" ;

AlternativeBlock . RepeatEnding ::= "\\alternative" "{" [MusicExpr] "}";

-- https://lilypond.org/doc/v2.20/Documentation/notation/writing-text
-- CreEndExp .     MusicExpr1  ::= "\\!" ; --\markup{ \italic "ten." }|-- https://lilypond.org/doc/v2.20/Documentation/notation/formatting-text

-- textExpression? Articulation
-- https://lilypond.org/doc/v2.20/Documentation/notation/direction-and-placement#articulation-direction-indicators
UpDirection .      DirectionIndicator ::= "^" ;
DownDirection .    DirectionIndicator ::= "_" ;
DefaultDirection . DirectionIndicator ::= "-" ;
NoDirection .      DirectionIndicator ::= ;

DynamicItem .      TypesetItem ::= Dynamic ;
TextItem .         TypesetItem ::= Text ;
InlineString .     Text ::= String ;
MarkupBlock .      Text ::= "\\markup" "{" "}" ; -- Quite extensive... https://lilypond.org/doc/v2.20/Documentation/notation/text-markup-commands

PDyn .     Dynamic ::= "\\p" ;
PpDyn .    Dynamic ::= "\\pp" ;
PppDyn .   Dynamic ::= "\\ppp" ;
PpppDyn .  Dynamic ::= "\\pppp" ;
PppppDyn . Dynamic ::= "\\ppppp" ;
FDyn .     Dynamic ::= "\\f" ;
FFDyn .    Dynamic ::= "\\ff" ;
FffDyn .   Dynamic ::= "\\fff" ;
FfffDyn .  Dynamic ::= "\\ffff" ;
FffffDyn . Dynamic ::= "\\fffff" ;
MpDyn .    Dynamic ::= "\\mp" ;
MfDyn .    Dynamic ::= "\\mf" ;
FpDyn .    Dynamic ::= "\\fp" ;
SfDyn .    Dynamic ::= "\\sf" ;
SffDyn .   Dynamic ::= "\\sff" ;
SfzDyn .   Dynamic ::= "\\sfz" ;
SpDyn .    Dynamic ::= "\\sp" ;
SppDyn .   Dynamic ::= "\\spp" ;
RfsDyn .   Dynamic ::= "\\rfz" ;

LayoutBlock .   ScoreDef   ::= "\\layout" "{" "}" ; -- TODO find out what can be here
MidiBlock .     ScoreDef   ::= "\\midi" "{" MidiDef "}";
separator ScoreDef "" ;

MidiTempo .     MidiDef    ::= "\\tempo" Integer "=" Integer ;


Major .         MajMin     ::= "\\major" ;-- TODO What more can fit in this? Going with majmin for now.
Minor .         MajMin     ::= "\\minor" ;

With .          WithBlock  ::= "\\with" "{" [WithDef] "}" ;  -- https://lilypond.org/doc/v2.20/Documentation/notation/changing-context-default-settings#changing-just-one-specific-context
InstName .      WithDef    ::= "instrumentName"      "=" String ; -- In the example #"Violin" ? So not Actually String? Token?
ShortInstName . WithDef    ::= "shortInstrumentName" "=" String ; -- In the example #"Vln. " ?
MidiInst .      WithDef    ::= "midiInstrument" "=" String ; -- TODO Also available as inline? http://lilypond.org/doc/v2.19/Documentation/notation/using-midi-instruments

separator WithDef "" ;

--http://lilypond.org/doc/v2.18/Documentation/notation/writing-parts#instrument-names
StringDef .     StrDef     ::= Ident "=" String ;

separator StrDef "" ;


token NoteToken ["abcdefgr"]({"es"} | {"is"})*["\',"]*(digit)*["."]* ;
-- From Earlier: Wrong? Uppercase notenames are not vaild.
-- token NoteToken "([A-Ha-hr])(es|is)*([',])*(\\d)*(\\.)*";
token VarToken {"\\"} letter+ ;

terminator MusicExpr "" ;

{-
To enter music with more voices or more staves, we combine expressions in parallel. To indicate that two voices should play at the same time, simply enter a simultaneous combination of music expressions. A ‘simultaneous’ music expression is formed by enclosing expressions inside << and >>. In the following example, three sequences (all containing two separate notes) are combined simultaneously:

    <<
      \relative { a'2 g }
      \relative { f'2 e }
      \relative { d'2 b }
    >>

-}
comment "%{" "%}" ;
comment "%";