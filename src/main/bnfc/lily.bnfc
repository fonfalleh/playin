-- Lilypond: http://lilypond.org/doc/v2.20/Documentation/notation/structure-of-a-score
-- http://lilypond.org/doc/v2.20/Documentation/notation/cheat-sheet
-- http://lilypond.org/doc/v2.20/Documentation/learning/introduction-to-the-lilypond-file-structure
-- BNFC grammar for C: https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf
{--
A \score block must contain a single music expression delimited by curly brackets:
\score {
  â€¦
}
--}

-- TODO top level defs are entrypoint?
--entrypoints Score, Def ; -- Score block works without entrypoints, but not other combinations?

ScoreFile . Entry ::= [Def] ;
separator Def "" ;
entrypoints Entry ;

VersionDef .    Def        ::= "\\version" String ;
VariableDef .   Def        ::= VarToken "=" MusicExpr ;
ScoreDef .      Def        ::= Score ;
PointClickDef . Def        ::= PointClick ;
HeaderDef     . Def        ::= "\\header" "{" [StrDef] "}" ;
-- TODO Seems fun.... SchemeDef     . Def        ::= "#" SchemeExpr ;

-- http://lilypond.org/doc/v2.18/Documentation/extending/lilypond-scheme-syntax
-- SchemeSchemeExpr ::=


PointClickOff . PointClick ::= "\\pointAndClickOff" ;
PointClickOn  . PointClick ::= "\\pointAndClickOn" ;


ScoreBlock .    Score      ::= "\\score" "{" MusicExpr [InScoreDef] "}" ;
-- List
-- coercions MusicExpr 3 ; Breaks slurs: (). _. Exp3 ::= "(" Exp ")" ;

RelativeExp .   MusicExpr  ::= "\\relative" NoteToken MusicExpr ; -- ""\relative startpitch musicexpr"
CompoundExp .   MusicExpr  ::= "{" [ MusicExpr ] "}" ;
NoteExp .       MusicExpr  ::= NoteToken ;
KeyExpMajmin .  MusicExpr  ::= "\\key" NoteToken MajMin ;
KeyExp .        MusicExpr  ::= "\\key" NoteToken ;
TimeExp .       MusicExpr  ::= "\\time" Integer "/" Integer ; -- TODO verify later with other time signatures
VarRefExp .     MusicExpr  ::= VarRefToken ;
FermExp .       MusicExpr  ::= "\\fermata" ;
TypesetExp .    MusicExpr2  ::= TypesetItem ; -- TODO come up with better name
DirTypesetExp . MusicExpr2  ::= DirectionIndicator TypesetItem ; -- TODO come up with better name -- TODO
BarExp .        MusicExpr  ::= "|" ;
CreStartExp .   MusicExpr  ::= "\\<" ;
DeCreStartExp . MusicExpr  ::= "\\>" ;
CreEndExp .     MusicExpr  ::= "\\!" ;
RepeatExpr .    MusicExpr  ::= "\\repeat" RepeatKind Integer MusicExpr ; -- http://lilypond.org/doc/v2.20/Documentation/notation/repeats
RepeatExprWithAlt . MusicExpr  ::= "\\repeat" RepeatKind Integer MusicExpr RepeatEnding ;
SlurStartExp .  MusicExpr  ::= "(" ;
SlurEndExp .    MusicExpr  ::= ")" ;
ClefExp .       MusicExpr  ::= "\\clef" ClefName ;
SimultExps .    MusicExpr  ::= "<<" [MusicExpr] ">>" ;
TieExp .        MusicExpr  ::= "~" ;
NewContextExp . MusicExpr  ::= "\\new" ContextDef ;
CtxContextExp . MusicExpr  ::= "\\context" ContextDef ;
NewNamedStaffExp .   MusicExpr  ::= "\\new" "Staff" "=" String MusicExpr ;
NewChoirStaffExp .   MusicExpr  ::= "\\new" "ChoirStaff" MusicExpr ;
PartialMeasureExp .  MusicExpr  ::= "\\partial" Integer ;
BeamMusicExp .       MusicExpr  ::= BeamExp ;
BarNumberCheckExp .  MusicExpr  ::= "\\barNumberCheck" "#" Integer ;
SetExpr .            MusicExpr  ::= "\\set" SetDef ;

-- \set ContextName.propertyName = #value
-- http://lilypond.org/doc/v2.22/Documentation/learning/modifying-context-properties
--TODO Scheme stuff...
SetProperty .     SetDef ::= VarToken "=" String ;
SetQualProperty . SetDef ::= QualVarToken "=" String ;

ContextDef .       ContextDef ::=  ContextType MusicExpr ;
NamedContextDef .  ContextDef ::=  ContextType "=" String MusicExpr ;
WithContextDef .   ContextDef ::=  ContextType WithBlock MusicExpr ;
--StaffExpWith .  MusicExpr  ::= "\\new" "Staff" WithBlock MusicExpr; -- TODO probably create more general \new Type --Also, precedence / nesting
-- TODO see http://lilypond.org/doc/v2.20/Documentation/notation/contexts-explained and http://lilypond.org/doc/v2.20/Documentation/learning/creating-contexts

ScoreType . ContextType ::= "Score" ;
VoiceType . ContextType ::= "Voice" ;
VoiceType . ContextType ::= "NullVoice" ;
StaffType . ContextType ::= "Staff" ;
StaffType . ContextType ::= "StaffGroup" ;
StaffType . ContextType ::= "ChoirStaff" ;

StartBeam . BeamExp ::= "[" ; -- http://lilypond.org/doc/v2.18/Documentation/notation/beams#manual-beams
StopBeam  . BeamExp ::= "]" ;

_ . MusicExpr ::= MusicExpr2 ;

Gclef .      ClefName ::= "G" ;
G8clef .     ClefName ::= "\"G_8\"" ; -- TODO Hmm... sometimes quoted? Also missing clef http://lilypond.org/doc/v2.19/Documentation/notation/clef-styles
Bassclef .   ClefName ::= "bass" ;
ClefString . ClefName ::= String ;

VoltaRepeat .   RepeatKind  ::= "volta" ;
UnfoldRepeat .  RepeatKind  ::= "unfold" ;
PercentRepeat . RepeatKind  ::= "percent" ;
TremoloRepeat . RepeatKind  ::= "tremolo" ;

AlternativeBlock . RepeatEnding ::= "\\alternative" "{" [MusicExpr] "}";

-- https://lilypond.org/doc/v2.20/Documentation/notation/writing-text
-- CreEndExp .     MusicExpr1  ::= "\\!" ; --\markup{ \italic "ten." }|-- https://lilypond.org/doc/v2.20/Documentation/notation/formatting-text

-- textExpression? Articulation
-- https://lilypond.org/doc/v2.20/Documentation/notation/direction-and-placement#articulation-direction-indicators
UpDirection .      DirectionIndicator ::= "^" ;
DownDirection .    DirectionIndicator ::= "_" ;
DefaultDirection . DirectionIndicator ::= "-" ;

DynamicItem .      TypesetItem ::= Dynamic ;
TextItem .         TypesetItem ::= Text ;
InlineString .     Text ::= String ;
MarkupBlock .      Text ::= "\\markup" "{" [MarkupText] "}" ; -- Quite extensive... https://lilypond.org/doc/v2.20/Documentation/notation/text-markup-commands

ModifiedMarkupItem . MarkupText ::= MarkupModifier MarkupText ;
TextMarkupItem .     MarkupText ::= VarToken ; -- TODO feels off, but let's go with this for now
StringMarkupItem .   MarkupText ::= String ; -- TODO feels off, but let's go with this for now
BlockMarkupItem .    MarkupText ::= "{" MarkupText "}" ; -- TODO feels off, but let's go with this for now

terminator MarkupText "" ;

BoldModifier . MarkupModifier ::= "\\bold" ;

--TextBody MarkupBody ::= String ;

PDyn .     Dynamic ::= "\\p" ;
PpDyn .    Dynamic ::= "\\pp" ;
PppDyn .   Dynamic ::= "\\ppp" ;
PpppDyn .  Dynamic ::= "\\pppp" ;
PppppDyn . Dynamic ::= "\\ppppp" ;
FDyn .     Dynamic ::= "\\f" ;
FFDyn .    Dynamic ::= "\\ff" ;
FffDyn .   Dynamic ::= "\\fff" ;
FfffDyn .  Dynamic ::= "\\ffff" ;
FffffDyn . Dynamic ::= "\\fffff" ;
MpDyn .    Dynamic ::= "\\mp" ;
MfDyn .    Dynamic ::= "\\mf" ;
FpDyn .    Dynamic ::= "\\fp" ;
SfDyn .    Dynamic ::= "\\sf" ;
SffDyn .   Dynamic ::= "\\sff" ;
SfzDyn .   Dynamic ::= "\\sfz" ;
SpDyn .    Dynamic ::= "\\sp" ;
SppDyn .   Dynamic ::= "\\spp" ;
RfsDyn .   Dynamic ::= "\\rfz" ;

LayoutBlock .   InScoreDef   ::= "\\layout" "{" "}" ; -- TODO find out what can be here
MidiBlock .     InScoreDef   ::= "\\midi" "{" MidiDef "}";
separator InScoreDef "" ;

MidiTempo .     MidiDef    ::= "\\tempo" Integer "=" Integer ;


Major .         MajMin     ::= "\\major" ;-- TODO What more can fit in this? Going with majmin for now.
Minor .         MajMin     ::= "\\minor" ;

With .          WithBlock  ::= "\\with" "{" [WithDef] "}" ;  -- https://lilypond.org/doc/v2.20/Documentation/notation/changing-context-default-settings#changing-just-one-specific-context
InstName .      WithDef    ::= "instrumentName"      "=" String ; -- In the example #"Violin" ? So not Actually String? Token?
ShortInstName . WithDef    ::= "shortInstrumentName" "=" String ; -- In the example #"Vln. " ?
MidiInst .      WithDef    ::= "midiInstrument" "=" String ; -- TODO Also available as inline? http://lilypond.org/doc/v2.19/Documentation/notation/using-midi-instruments

separator WithDef "" ;

--http://lilypond.org/doc/v2.18/Documentation/notation/writing-parts#instrument-names
StringDef .     StrDef     ::= VarToken "=" String ; --TODO IDENT BROKE EVERYTHING?!?!?!?

separator StrDef "" ;


token NoteToken (["abcdefgr"]|{"es"})({"es"} | {"is"})*["\',"]*(digit)*["."]* ; -- TODO break out rest as own token?
token VarRefToken {"\\"} letter+ ;
token VarToken letter+ ;
token QualVarToken letter+ {"."} letter+ ; -- Perhaps a bit lazy.

terminator MusicExpr "" ;

comment "%{" "%}" ;
comment "%";